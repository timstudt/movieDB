# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
xcversion(version: "~>11.2.0")

def change_log_since_last_tag
  # http://git-scm.com/docs/pretty-formats
  # <short hash> <commit title>
  return changelog_from_git_commits(pretty: '%h %s')
end

def version_string(version_number, build_number)
  "#{version_number} (#{build_number})"
end

def tag_name(build_type, version_number, build_number)
  "#{build_type}/#{version_number}/#{build_number}"
end

def workspace
  return "MovieDB.xcworkspace"
end

def main_scheme
  return "MovieDB"
end

platform :ios do
  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(workspace: workspace, scheme: "MovieDBUITests")
  end

  desc "Builds and archives MovieDB, set clean:false for incremental build"
  lane :archive do |options|
    clean = options[:clean] || true

    change_log = change_log_since_last_tag

    #cert
    sigh(force: true,
         adhoc: true
    )

    gym(
      export_method: "ad-hoc",
      include_symbols: true,
      clean: clean
    )
  end

  # desc "Runs all the tests"
  lane :all_tests do
    scan(
      code_coverage: true,
      thread_sanitizer: true,
      output_directory: ENV["REPORT_PATH"],
      xcargs: "-showBuildTimingSummary"
    )
  end

  lane :generate_reports do
    generate_cov_report()
    lint_project()
  end

  lane :generate_cov_report do
    xcov(
      workspace: workspace,
      scheme: main_scheme,
      only_project_targets: true,
      minimum_coverage_percentage: 60.0,
      ignore_file_path: '.xcovignore',
      output_directory: ENV["REPORT_PATH"]
  )
  end

  lane :lint_project do
    swiftlint(
      mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect
      executable: "Pods/SwiftLint/swiftlint", # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
      output_file: "#{ENV["REPORT_PATH"]}/swiftlint.result.html",   # The path of the output file (optional)
      reporter: "html",                       # The custom reporter to use (optional)
      config_file: ".swiftlint.yml",       # The path of the configuration file (optional)
    )
  end

  lane :review_pr do
    danger(
      github_api_token: ENV["DANGER_GITHUB_API_TOKEN"],
      verbose: true
    )
  end

  lane :outdated do
    `bundle outdated`
    `bundle exec pod outdated`
  end
  # desc "Run Unit Tests"
  # lane :utests do |options|
  #   sh "xcodebuild -scheme MovieDBTests -workspace MovieDB.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.4' test | xcpretty;"
  #   sh "xcodebuild -scheme MovieDBDataTests -workspace MovieDB.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 8,OS=11.4' test | xcpretty;"
  # end

  lane :generate_docs do
    jazzy(config: ".jazzy.yaml")
  end

  # error do |lane, exception|
  #    slack(
  #      message: exception.message,
  #      success: false
  #    )
  # end

end
